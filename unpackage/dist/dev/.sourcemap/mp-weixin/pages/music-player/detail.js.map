{"version":3,"sources":["webpack:///C:/Users/Administrator/Desktop/test002/miniprogram02_uni/pages/music-player/detail.vue?81ba","webpack:///C:/Users/Administrator/Desktop/test002/miniprogram02_uni/pages/music-player/detail.vue?8140","uni-app:///main.js",null,"webpack:///C:/Users/Administrator/Desktop/test002/miniprogram02_uni/pages/music-player/detail.vue?dc1c","uni-app:///pages/music-player/detail.vue","webpack:///C:/Users/Administrator/Desktop/test002/miniprogram02_uni/pages/music-player/detail.vue?86ba","webpack:///C:/Users/Administrator/Desktop/test002/miniprogram02_uni/pages/music-player/detail.vue?2f6b","webpack:///C:/Users/Administrator/Desktop/test002/miniprogram02_uni/pages/music-player/map.wxs?1d4a","webpack:///C:/Users/Administrator/Desktop/test002/miniprogram02_uni/pages/music-player/map.wxs?b288"],"names":["wx","__webpack_require_UNI_MP_PLUGIN__","__webpack_require__","createPage","Page"],"mappings":"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uCAkJA;AACA;AACA,KApJA;;AAsJA;AACA,4BAvJA,sCAuJA;AACA;AACA,KAzJA;;AA2JA;AACA,sBA5JA,8BA4JA,KA5JA,EA4JA;AACA,4DADA,CACA;;AAEA;AACA;AACA;AACA,KAlKA;;AAoKA;AACA,+BArKA,uCAqKA,KArKA,EAqKA;AACA;AACA,gFAFA,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA9KA;;AAgLA;AACA,gBAjLA,0BAiLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DADA;AAEA;AACA,kCAHA;;AAKA;;AAEA;AACA;AACA;AACA,SArBA,MAqBA;AACA;AACA;AACA,OAzBA,EAyBA,EAzBA;AA0BA,KA5MA;;AA8MA;AACA,oBA/MA,4BA+MA,OA/MA,EA+MA;AACA;AACA;;AAEA;AACA;AACA,OAFA,MAEA;AACA;AACA;AACA,KAxNA;;AA0NA;AACA,oBA3NA,4BA2NA,OA3NA,EA2NA;AACA;;AAEA;AACA;AACA,OAFA,MAEA;AACA;AACA;AACA,KAnOA;;AAqOA;AACA,0BAtOA,oCAsOA;AACA;AACA;;AAEA;AACA;AACA,SALA,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iHAhBA,CAgBA;;AAEA;AACA,uCAnBA,CAmBA;;AAEA;AACA,8CADA,CACA;;AAEA;AACA;AACA,kDADA;;AAGA;AACA,SARA,MAQA;AACA;AACA;AACA;AACA,kCADA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mDAHA;AAIA,iEAJA;;AAMA,SA9CA,CA8CA;;AAEA;;AAEA;AACA;AACA,0BADA;AAEA,oCAFA;;AAIA;AACA,OAxDA;AAyDA,KAhSA;;AAkSA;AACA,uBAnSA,+BAmSA,OAnSA,EAmSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBADA;;AAGA;AACA,OAPA,MAOA;AACA;AACA;AACA,KAhTA;;AAkTA;AACA,YAnTA,oBAmTA,GAnTA,EAmTA,KAnTA,EAmTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAFA,EAEA,KAFA;AAGA,OAPA;AAQA,KA7TA;;AA+TA;AACA,aAhUA,qBAgUA,GAhUA,EAgUA;AACA,yBADA,CACA;;AAEA;;AAEA;AACA;AACA,OAPA,CAOA;;AAEA;AACA;AACA,OAXA,CAWA;AACA;AACA;AACA;;AAEA,+CAhBA,CAgBA;;AAEA;AACA;AACA,0CAFA,CAEA;;AAEA;AACA;AACA;AACA;AACA,4DAJA,CAIA;;AAEA;AACA;AACA,SAZA,CAYA;AACA,OAbA;AAcA;AACA,KAjWA;;AAmWA;AACA,oBApWA,4BAoWA,QApWA,EAoWA;AACA;AACA;AACA;AACA;AACA;AACA,OAJA;AAKA;AACA,KA5WA;;AA8WA;AACA,4BA/WA,sCA+WA;AACA;AACA;AACA,oCADA;;AAGA,KApXA;;AAsXA;AACA;AACA,sBAxXA,8BAwXA,KAxXA,EAwXA;AACA,yBADA,CACA;;AAEA;AACA,oCAJA,CAIA;;AAEA,sDANA,CAMA;AACA;;AAEA,uEATA,CASA;;AAEA;AACA;AACA;AACA;AACA;AACA,8DAhBA,CAgBA;;AAEA;AACA,+BADA;AAEA;AACA,2BAHA;AAIA,gCAJA;;AAMA;AACA,KAjZA;;AAmZA;AACA,oBApZA,4BAoZA,KApZA,EAoZA;AACA;AACA,0BADA;;AAGA,wDAJA,CAIA;;AAEA;AACA,kCAPA,CAOA;;AAEA;AACA,mEAVA,CAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BADA;AAEA,gCAFA;;AAIA;AACA,KAjbA;;AAmbA;AACA,cApbA,wBAobA;AACA;AACA,uCADA,CACA;;AAEA;AACA;AACA,OALA;AAMA;AACA,wCADA,CACA;;AAEA;AACA,OAJA;AAKA;AACA;AACA;AACA,OAHA;AAIA;AACA;AACA;;AAEA;AACA;AACA,SALA,CAKA;;AAEA,iHAPA,CAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uCApBA,CAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,yCADA;;AAGA;;AAEA;AACA;AACA;AACA;AACA,iEAHA;AAIA,iDAJA;;AAMA,SAvEA,CAuEA;;AAEA;;AAEA;AACA;AACA,0BADA;AAEA,oCAFA;;AAIA;AACA,OAjFA,EAiFA,GAjFA,CADA;;AAoFA,KAxhBA;;AA0hBA;AACA,2BA3hBA,yCA2hBA;AACA;AACA;AACA,gCADA;;AAGA;;AAEA;AACA;AACA,4BADA;;AAGA;;AAEA;AACA;AACA;AACA,8BADA;;AAGA;;AAEA;AACA;AACA,0CADA;;AAGA;;AAEA;AACA;AACA;AACA,oCADA;;AAGA;;AAEA;AACA;AACA,sBADA;;AAGA,OArCA,CAqCA;;AAEA;AACA;AACA,kCADA;;AAGA;AACA;AACA,KAxkBA;;AA0kBA;AACA;AACA;AACA,4BA7kBA,sCA6kBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBADA;;AAGA;;AAEA;AACA;AACA,kBADA;;AAGA;;AAEA;AACA;AACA,0BADA;;AAGA;AACA,OAlBA,EAJA,CAsBA;;AAEA;AACA,wGADA,EACA;AACA,kCAFA;AAGA;;AAEA;AACA;AACA;AACA,wBADA;;AAGA,SALA,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAdA,EA7BA,CA2CA;;AAEA;AACA;AACA;AACA,wCADA;AAEA,sDAFA;;AAIA;AACA,OAPA,EA7CA,CAoDA;;AAEA;AACA;AACA;AACA,sCADA;;AAGA;;AAEA;AACA;AACA,wCADA;;AAGA;AACA,OAZA;AAaA,KAhpBA,EAxOA,E;;;;;;;;;;;;;ACvNA;AAAA;AAAA;AAAA;AAA2oC,CAAgB,inCAAG,EAAC,C;;;;;;;;;;;ACA/pC;AACA,OAAO,KAAU,EAAE,kBAKd;;;;;;;;;;;;;ACNL;AAAA;AAAA,wCAA8U,CAAgB,oZAAG,EAAC,C;;;;;;;;;;;;ACAlW;AAAe;AACf;AACA;AACA;;AAEA,M","file":"pages/music-player/detail.js","sourcesContent":["export * from \"-!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\loaders\\\\templateLoader.js??vue-loader-options!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--16-0!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\template.js!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-uni-app-loader\\\\page-meta.js!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./detail.vue?vue&type=template&id=4b58372e&filter-modules=eyJtYXAiOnsidHlwZSI6InNjcmlwdCIsImNvbnRlbnQiOiIiLCJzdGFydCI6MTAyMjAsImF0dHJzIjp7Im1vZHVsZSI6Im1hcCIsImxhbmciOiJ3eHMiLCJzcmMiOiIuL21hcC53eHMifSwiZW5kIjoxMDIyMH19&\"","var components\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n}\nvar recyclableRender = false\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns, recyclableRender, components }","import 'uni-pages';wx.__webpack_require_UNI_MP_PLUGIN__ = __webpack_require__;\nimport Vue from 'vue'\nimport Page from './pages/music-player/detail.vue'\ncreatePage(Page)","import { render, staticRenderFns, recyclableRender, components } from \"./detail.vue?vue&type=template&id=4b58372e&filter-modules=eyJtYXAiOnsidHlwZSI6InNjcmlwdCIsImNvbnRlbnQiOiIiLCJzdGFydCI6MTAyMjAsImF0dHJzIjp7Im1vZHVsZSI6Im1hcCIsImxhbmciOiJ3eHMiLCJzcmMiOiIuL21hcC53eHMifSwiZW5kIjoxMDIyMH19&\"\nvar renderjs\nimport script from \"./detail.vue?vue&type=script&lang=js&\"\nexport * from \"./detail.vue?vue&type=script&lang=js&\"\nimport style0 from \"./detail.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\runtime\\\\componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null,\n  false,\n  components,\n  renderjs\n)\n\n/* custom blocks */\nimport block0 from \"./map.wxs?vue&type=custom&index=0&blockType=script&issuerPath=C%3A%5CUsers%5CAdministrator%5CDesktop%5Ctest002%5Cminiprogram02_uni%5Cpages%5Cmusic-player%5Cdetail.vue&module=map&lang=wxs\"\nif (typeof block0 === 'function') block0(component)\n\ncomponent.options.__file = \"pages/music-player/detail.vue\"\nexport default component.exports","import mod from \"-!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\babel-loader\\\\lib\\\\index.js!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--12-1!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\script.js!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./detail.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\babel-loader\\\\lib\\\\index.js!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--12-1!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\script.js!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./detail.vue?vue&type=script&lang=js&\"","<template>\r\n\r\n    <block>\r\n\t\t<view v-if=\"music\">\r\n\t\t\t\r\n\t\t\r\n\t\t<JKNavigator title=\"NOW PLAYING\" :navMarginTop=\"navMarginTop\" :navHeight=\"navHeight\" :menuButtonRightPadding=\"menuButtonRightPadding\"></JKNavigator>\r\n\t\t\n        <!-- 1.背景 -->\n        <!-- 图片设置mode=\"aspectFill\"属性（保持宽高比例，图片充满，超出裁剪） -->\n        <image class=\"bg-image\" mode=\"aspectFill\" :src=\"music.photo.url || '../../images/test.png'\" ></image>\n        <view class=\"bg-cover\"></view>\n\n        <!-- 音乐播放列表 -->\n        <!-- 展示音乐时出现的灰色的背景 -->\n        <view class=\"maskBgc\" v-if=\"showMusicList\" @tap=\"changeShowMusicListState\"></view>\n        <!-- 用于展示音乐歌单 -->\n\n        <view class=\"real-music-list\" :style=\"'transform:translate(0%,' + (showMusicList ? '0vh' : '60vh') + ');'\">\n            <view class=\"music-list-container\">\n                <view class=\"music-list-title\">\n                    当前播放\n                    <text class=\"musicListLength\">({{ playSongList.length}})</text>\n                </view>\n\n                <scroll-view class=\"musicListSrcoll\" scroll-y :show-scrollbar=\"false\" :enhanced=\"true\" :scroll-into-view=\"'currentMusic' + playSongIndex\">\n                    <view class=\"musicItem\" :id=\"'currentMusic' + index\" :data-index=\"index\" @tap=\"changeCurrentMusic\" v-for=\"(item, index) in playSongList\" :key=\"index\">\n                        <view class=\"music-info-container\">\n                            <view :class=\"playSongIndex === index ? 'current-music-name' : 'music-name'\">{{ item.name }}</view>\n                            <view :class=\"playSongIndex === index ? 'current-artist-name' : 'artist-name'\">-{{ map.getNameList(item.artistVoList) || '' }}</view>\n                        </view>\n\n                        <view class=\"delete-icon-container\">\n                            <view class=\"delete-icon\" @tap.stop.prevent=\"deleteMusicListCurrentMusic\" :data-index=\"index\">×</view>\n                        </view>\n                    </view>\n                </scroll-view>\n\n                <view class=\"music-list-bottom\"></view>\n            </view>\n        </view>\n\n        <!-- 内容 -->\n        <!-- <view class=\"page\" style=\"height:{{contentHeight}}px;top:{{contentTop}}px\"> -->\n        <view class=\"page\" :style=\"'height:100vh;top:' + contentTop + 'px'\">\r\n\t\t\t\n            <view class=\"music-player-container\">\n                <!-- 图片 -->\n                <view class=\"img-container\">\n                    <view>\n                        <image :src=\"music.photo.url || '../../images/test.png'\" class=\"musicImg\" @tap=\"changeLrcState\" v-if=\"showLrc === false\"></image>\n                        <view class=\"lyc-container\" @tap=\"changeLrcState\" v-if=\"showLrc === true\">\n                            <scroll-view scroll-y :show-scrollbar=\"false\" :enhanced=\"true\" :scroll-top=\"lycScrollTop\" >\n                                <view class=\"decorate\">1</view>\n                                <view class=\"decorate\">1</view>\n                                <view class=\"decorate\">1</view>\n                                <view class=\"decorate\">1</view>\n                                <view class=\"decorate\">1</view>\n                                <view class=\"decorate\">1</view>\n\n                                <view :class=\"currentLycIndex === index ? 'currentLyc' : ''\" :id=\"'Lyc' + index\" v-for=\"(item, index) in lycArray\" :key=\"index\">\n                                    {{ item[1] }}\n                                </view>\n                            </scroll-view>\n                        </view>\n                        <view class=\"shrinked-lyc-container\" @tap=\"changeLrcState\" v-if=\"showLrc === false\">\n                            <view class=\"shrinked-scroll-container\">\n                                <scroll-view scroll-y :show-scrollbar=\"false\" :enhanced=\"true\" :scroll-into-view=\"toLyc\">\n                                    <view :class=\"currentLycIndex === index ? 'currentLyc' : ''\" :id=\"'Lyc' + index\" v-for=\"(item, index) in lycArray\" :key=\"index\">\n                                        {{ item[1] }}\n                                    </view>\n                                </scroll-view>\n                            </view>\n                        </view>\n                    </view>\n                </view>\n                <view class=\"function-icon-container\">\n                    <!-- 歌曲名字/歌手名字 -->\n                    <view class=\"text-container\">\n                        <view>\n                            <view class=\"music-name-container\">\n                                <text>{{ music.name }}</text>\n                            </view>\n\n                            <view class=\"album-name-container\" v-if=\"music.albumVoList.length !== 0\">\n                                <text>{{ map.getNameList(music.albumVoList) || '' }}</text>\n                            </view>\n\n                            <view class=\"artist-name-container\" v-if=\"music.artistVoList.length !== 0\">\n                                <text>{{ map.getNameList(music.artistVoList) || '' }}</text>\n                            </view>\n                        </view>\n                    </view>\n                    <!-- 音乐播放进度条 -->\n                    <view class=\"time-code-solider\">\n                        <!-- <view class=\"progress\">\n      \n        <view class=\"progress-bar\" style=\"width:{{value}}%;\">\n       \n\n        </view>\n      </view> -->\n                        <view class=\"slider-container\">\n                            <view>\n                                <slider\n                                    class=\"slider\"\n                                    :block-size=\"blockSize\"\n                                    selected-color=\"rgba(16, 93, 251,1)\"\n                                    backgroundColor=\" rgba(16, 93, 251,0.4)\"\n                                    block-color=\"rgba(255, 255, 255, 0.75)\"\n                                    :value=\"value\"\n                                    @change=\"handleSliderChange\"\n                                    @changing=\"handleSliderDrag\"\n                                ></slider>\n                            </view>\n                        </view>\n\n                        <view class=\"time-container\">\n                            <view class=\"current-time\">{{ currentTime || '00:00' }}</view>\n                            <view class=\"total-time\">{{ formatTime || '00:00' }}</view>\n                        </view>\n                    </view>\n\n                    <!-- 播放按钮区域 -->\n                    <view class=\"play-icon-container\">\n                        <view class=\"back\" @tap=\"changePlayMusicToSlow30s\">\n                            <view>\n                                <image src=\"/static/images/reback.png\" alt=\"\" />\n                            </view>\n                        </view>\n\n                        <view class=\"previous-music\" @tap=\"changePlayMusicToPreMusic\">\n                            <view>\n                                <image src=\"/static/images/previous-music.png\" alt=\"\" />\n                            </view>\n                        </view>\n\n                        <view class=\"play-music\" @tap=\"changePlayState\">\n                            <view>\n                                <image :src=\"isPlay ? '/static/images/play-music-pause.png' : '/static/images/play-music-play.png'\" alt=\"\" />\n                            </view>\n                        </view>\n                        <view class=\"next-music\" @tap=\"changePlayMusicToNextMusic\">\n                            <view>\n                                <image src=\"/static/images/next-music.png\" alt=\"\" />\n                            </view>\n                        </view>\n                        <view class=\"forward\" @tap=\"changePlayMusicToQuick30s\">\n                            <view>\n                                <image src=\"/static/images/forward.png\" alt=\"\" />\n                            </view>\n                        </view>\n                    </view>\n                    <!-- 喜欢/设置按钮区域 -->\n                    <view class=\"like-icon-container\">\n                        <view class=\"like\">\n                            <view>\n                                <image src=\"/static/images/like.png\" alt=\"\" />\n                            </view>\n                        </view>\n\n                        <view class=\"ramdom-play\">\n                            <view>\n                                <image\n                                    @tap=\"changePlayModeIndexToRadom\"\n                                    :src=\"playModeIndex === 2 ? '/static/images/ramdom-play-click.png' : '/static/images/ramdom-play-unclick.png'\"\n                                    alt=\"\"\n                                />\n                            </view>\n                        </view>\n\n                        <view class=\"single-circle-play\">\n                            <view>\n                                <image\n                                    @tap=\"changePlayModeIndexToSingleCricle\"\n                                    :src=\"playModeIndex === 1 ? '/static/images/single-circle-click.png' : '/static/images/single-circle-unclick.png'\"\n                                    alt=\"\"\n                                />\n                            </view>\n                        </view>\n\n                        <view class=\"list-circle-play\">\n                            <view>\n                                <image\n                                    @tap=\"changePlayModeIndexToListCricle\"\n                                    :src=\"playModeIndex === 0 ? '/static/images/list-circle-click.png' : '/static/images/list-circle-unclick.png'\"\n                                    alt=\"\"\n                                />\n                            </view>\n                        </view>\n\n                        <view class=\"music-list\" @tap=\"changeShowMusicListState\">\n                            <view>\n                                <image :src=\"showMusicList ? '/static/images/play-list-click.png' : '/static/images/play-list-unclick.png'\" alt=\"\" />\n                            </view>\n                        </view>\n                    </view>\n                </view>\n            </view>\n        </view>\r\n\t  </view>\n    </block>\n</template>\n<script module=\"map\" lang=\"wxs\" src=\"./map.wxs\"></script>\n<script>\nimport JKNavigator from '../../components/common/JKNavigator/index';\nimport JKNavigatorV2 from '../../components/common/JKNavigatorV2/index';\nimport { get, getDIY } from '../../api/request';\nimport { getMusicById } from '../../api/music';\nimport { backgroundAudioManager, debounce, parseLyric, playerStore, throttle } from '../../store/index';\nimport moment from '@/miniprogram_npm/moment';\nconst app = getApp();\nconst playModeNames = ['order', 'repeat', 'random']; //！！！！！！！！！！！\n// 该页面的大部分的逻辑代码都转移到了store/plaer-store了，留下来的都是原稿\n\nexport default {\n    components: {\n        JKNavigator,\n        JKNavigatorV2\n    },\n    data() {\n        return {\n            value: 0,\n            music: null,\n            isPlay: false,\n            totalTime: 0,\n            formatTime: '00:00',\n            currentTime: '00:00',\n            canPlay: false,\n            percent: 0,\n            showLrc: false,\n            lycArray: [],\n            currentLycIndex: 0,\n            lycScrollTop: 0,\n            musicSrc: null,\n            musicName: null,\n            musicId: null,\n            toLyc: '',\n            showMusicList: false,\n            contentHeight: 0,\n\n            //需要下移的高度\n            contentTop: 0,\n\n            deviceRadio: 0,\n            isSliderDrag: false,\n            playModeIndex: 0,\n            playModeName: 'order',\n            playSongList: [],\n            playSongIndex: 0,\n            toCurrentMusic: '',\n            toView: '',\n            id: '',\n            url: '',\r\n\t\t\tshowNavigator:false,\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tnavBoxHeight: 0,\r\n\t\t\t\r\n\t\t\t//导航栏的盒子高度\r\n\t\t\tstatusBarHeight: 0,\r\n\t\t\t\r\n\t\t\t// 状态栏高度\r\n\t\t\tnavMarginTop: 0,\r\n\t\t\t\r\n\t\t\t// 导航栏上边距/胶囊按钮的上边距\r\n\t\t\tnavHeight: 0,\r\n\t\t\t\r\n\t\t\t// 导航栏高度\r\n\t\t\tnavWidth: 0,\r\n\t\t\t\r\n\t\t\t// 导航栏宽度\r\n\t\t\tmenuButtonRightPadding: 0,\r\n\t\t\t\r\n\t\t\t//进度条滑块的大小\r\n\t\t\tblockSize:0\n        };\n    },\n    /**\n     * 生命周期函数--监听页面加载\n     */\n    // 整体的业务逻辑已经转移到store里面的player-store文件里面去了\n    onLoad(options) {\r\n\t\t// 根据微信小程序的右上侧的胶囊样式 设置导航栏内容的高度\r\n\t\t// #ifndef H5 || APP-PLUS || MP-ALIPAY\r\n\t\tthis.calculateMenuAndStatusBar()\r\n\t\t// #endif\r\n\t\t\r\n\t\t// 根据微信小程序的右上侧的胶囊样式 设置导航栏内容的高度\r\n\t\t// #ifdef H5 || APP-PLUS || MP-ALIPAY\r\n\t\t\r\n\t\tlet redioDevice =uni.upx2px(10)/10\r\n\t\t\r\n\t\tthis.navMarginTop=24\r\n\t\tthis.navHeight= 32\r\n\t\tthis.menuButtonRightPadding=7\r\n\t\tthis.blockSize=20/2/redioDevice\r\n\t\t// #endif\r\n\r\n\r\n\t\t// this.calculateMenuAndStatusBar()\n        //获取播放模式\n        let playModeIndex = uni.getStorageSync('playModeIndex');\n\n        if (playModeIndex) {\n            this.setData({\n                playModeIndex\n            });\n        } else {\n            this.setData({\n                playModeIndex: 0\n            });\n            uni.setStorageSync('playModeIndex', 0);\n            playerStore.setState('playModeIndex', 0);\n        } //监听和获取歌曲的信息\n\t\t\r\n\t\t\n        this.watchPlayerStoreListener(); //计算页面容器的高度\n\n        const info = uni.getSystemInfoSync(); //整个屏幕的高度\n\n        let sreenHeight = app.globalData.sreenHeight || info.screenHeight; // 状态栏 + 胶囊按钮边距\n\n        let navMarginTop = app.globalData.navMarginTop; //胶囊按钮的高度\n\n        let navHeight = app.globalData.navHeight; //页面的高度\n\n        let contentHeight = sreenHeight - navMarginTop - navHeight; //页面排除胶囊按钮后的高度\n\n        let contentTop = navMarginTop + navHeight; //像素比\n\n        let deviceRadio = app.globalData.deviceRadio;\n        console.log(contentHeight, sreenHeight, navMarginTop, navHeight);\n        this.setData({\n            contentHeight,\n            contentTop,\n            deviceRadio\n        });\r\n\t\t\r\n\t\t\r\n\t\t// #ifdef H5 || APP-PLUS || MP-ALIPAY\r\n\t\t\r\n\t\tthis.contentTop=56\r\n\t\t\t\r\n\t\t// #endif\r\n\t\t\n        console.log(this.deviceRadio);\n        console.log(options);\n        let isNowPlayMusic = this.musicIsNowPlayMusic(options.id);\n        console.log(isNowPlayMusic);\n\n        if (isNowPlayMusic) {\n            this.changeMusicIsPlay(true);\n        }\n\n        if (options.id) {\n            console.log(`/music/${options.id}`); // getMusicById(options.id).then(res=>{\n            //   console.log(res)\n            //   this.setData({\n            //     music:res.data\n            //   })\n\n            console.log(this.music); //创建一个可以后台播放的audio 并且绑定到this上，这样我们就可以在任意位置调用该audio的方法和属性\n            //上面的是我们以前使用的方法，现在我们使用Store里面的文件来引入一个backgroundAudioManager\n            //这样就不用this.backgroundAudioManager 而是直接使用\n            //修改：现在引入的方法并不好用该为原来的方法\n            // this.backgroundAudioManager= wx.getBackgroundAudioManager()\n            // this.backgroundAudioManager.stop();\n            // this.backgroundAudioManager.src=this.data.music.file.url;\n            // this.backgroundAudioManager.title=this.data.music.name\n            //为了处理组件运行了一个歌曲，再运行时显示的长度是上一首歌曲的时间长度\n            // if(appInstance.globalData.musicTotalTime=this.data.totalTime){\n            //   this.loadDuration()\n            // }\n            //设置音乐的访问地址和名字和id\n            // this.setData({\n            //   musicSrc:this.data.music.file.url,\n            //   musicName:this.data.music.name,\n            //   musicId:this.data.music.id\n            // })\n\n            console.log(this.totalTime); //判断此时的页面是是否是我们之前播放的页面\n            //音乐播放进度条的更新\n            // this.musicProcessTimeUpdate()\n            //音乐的更新状态函数\n            // this.watchMusic()\n            // this.musicOnEnd()\n            //请求歌词数据\n            // console.log(this.data.music.lyc.url)\n            // getDIY(this.data.music.lyc.url).then((res)=>{\n            //   let lyc=res.data\n            //   lyc=parseLyric(lyc)\n            //   console.log(lyc)\n            //   this.setData({\n            //     lycArray:lyc\n            //   })\n            // })\n            // })\n        } //用于掩饰进度条\n        // setTimeout(()=>{\n        //   setInterval(()=>{\n        //     this.setData({\n        //       value:this.data.value+1\n        //     })\n        //     // if(innerAudioContext.currentTime){\n        //     // console.log(innerAudioContext.currentTime)\n        //     // }\n        //   },100)\n        // },1000);\n    },\n    /**\n     * 生命周期函数--监听页面初次渲染完成\n     */\n    onReady() {},\n    /**\n     * 生命周期函数--监听页面显示\n     */\n    onShow() {\n        playerStore.dispatch('saveMusicListIntoStorage');\n    },\n    /**\n     * 生命周期函数--监听页面隐藏\n     */\n    onHide() {},\n    /**\n     * 生命周期函数--监听页面卸载\n     */\n    onUnload() {\n        //停止监听\n        //     playerStore.offStates([\"formatTime\",\"lycArray\",\"totalTime\",\"currentLycIndex\",\"lycScrollTop\",\"toLyc\",\"currentTime\"],\n        // //封装好的函数，就在watchPlayerStoreListener上面\n        //     this.musicStateWatchFunciton\n        //     );\n        // playerStore.dispatch('saveMusicListIntoStorage')\n    },\n    /**\n     * 页面相关事件处理函数--监听用户下拉动作\n     */\n    onPullDownRefresh() {},\n    /**\n     * 页面上拉触底事件的处理函数\n     */\n    onReachBottom() {},\n    /**\n     * 用户点击右上角分享\n     */\n    onShareAppMessage() {},\n    methods: {\n\n\n        // 自定义函数区\r\n\t\t\r\n\t\t//calculateMenuAndStatusBar用于获取和计算头部导航栏的宽度和高度的函数\r\n\t\t  calculateMenuAndStatusBar() {\r\n\t\t    //利用 wx.getMenuButtonBoundingClientRect 得到胶囊按钮的坐标和高宽等信息\r\n\t\t    let menuButtonInfo = uni.getMenuButtonBoundingClientRect(); //top是胶囊按钮的上坐标，right是胶囊按钮的下坐标\r\n\t\t    //width,height是胶囊按钮的宽度和高度\r\n\t\t\r\n\t\t    const { top, right, width, height } = menuButtonInfo; // console.log(menuButtonInfo)\r\n\t\t    //利用 wx.getSystemInfo方法获取到状态栏的高度，状态栏就是右上角的电池\r\n\r\n\t\t    uni.getSystemInfo({\r\n\t\t        success: (res) => {\r\n\t\t            //statusBarHeight就是状态栏的高度\r\n\t\t            const { statusBarHeight,screenWidth } = res; //top:胶囊按钮的上坐标，上坐标是从页面顶部到胶囊按钮的顶部的距离\r\n\t\t\t\t\tconsole.log(res);\r\n\t\t            //statusBarHeight就是状态栏的高度\r\n\t\t            //两值相减就能得到他们的间距，也就是margin\r\n\t\t\r\n\t\t            const margin = top - statusBarHeight; //getWindowInfo用于获取窗口的宽度，注意：需要小程序基础库版本不低于 2.21.3\r\n\t\t\r\n\t\t\r\n\t\t\t\t\t\r\n\t\t            this.setData({\r\n\t\t                //statusBarHeight就是状态栏的高度\r\n\t\t                statusBarHeight: statusBarHeight,\r\n\t\t                //navHeight导航栏的总体高度，胶囊按钮高度+状态栏的高度+胶囊按钮边距\r\n\t\t                navBoxHeight: height + statusBarHeight + margin * 2,\r\n\t\t                //导航栏的margintop，就是状态栏的高度+状态栏和胶囊按钮的间距，其实就是胶囊按钮的上边距\r\n\t\t                navMarginTop: statusBarHeight + margin,\r\n\t\t                // 状态栏 + 胶囊按钮边距\r\n\t\t                //导航栏文字和图标的高度\r\n\t\t                navHeight: height,\r\n\t\t                // 与胶囊按钮同高\r\n\t\t                //right:胶囊按钮右边坐标\r\n\t\t                //width:胶囊按钮宽度\r\n\t\t                //这里计算的是胶囊按钮左边部分的可用宽度\r\n\t\t                navWidth: right - width,\r\n\t\t                // 胶囊按钮右边坐标 - 胶囊按钮宽度 = 按钮左边可使用宽度\r\n\t\t                //胶囊按钮的右边距\r\n\t\t                menuButtonRightPadding: res.screenWidth - menuButtonInfo.right\r\n\t\t            });\r\n\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t            const app = getApp();\r\n\t\t            app.globalData.navMarginTop = this.navMarginTop;\r\n\t\t            app.globalData.navHeight = this.navHeight;\r\n\t\t\t\t\tconsole.log(app.globalData.navMarginTop )\r\n\t\t\t\t\t\r\n\t\t        }\r\n\t\t    });\r\n\t\t},\n        //改变播放状态的函数\n        changePlayState() {\n            let isPlay = !this.isPlay;\n            playerStore.dispatch('changeMusicPlayState', isPlay);\n            this.setData({\n                isPlay\n            }); // this.changeMusicPlayState(isPlay);\n            // console.log(this.data.isPlay)\n        },\n\n        //改变音乐播放状态\n        changeMusicPlayState(isPlay) {\n            if (isPlay) {\n                backgroundAudioManager.play();\n            } else {\n                backgroundAudioManager.pause();\n            }\n        },\n\n        //设置用于图标显示isPlay变量的函数，只是个封装函数跟this.setData一样的，只是这样写更美观\n        changeMusicIsPlay(isPlay) {\n            this.setData({\n                isPlay\n            });\n        },\n\n        //改变歌词的显示状态(页面绑定)\n        changeLrcState() {\n            this.setData({\n                showLrc: !this.showLrc\n            });\n        },\n\n        //改变随机播放图标的显示状态(页面绑定)\n        changePlayModeIndexToRadom() {\n            this.setData({\n                playModeIndex: 2\n            });\n            playerStore.setState('playModeIndex', 2);\n            uni.setStorageSync('playModeIndex', 2);\n            uni.showToast({\n                title: '随机播放',\n                icon: 'none',\n                duration: 1000\n            });\n        },\n\n        changePlayModeIndexToSingleCricle() {\n            this.setData({\n                playModeIndex: 1\n            });\n            playerStore.setState('playModeIndex', 1);\n            uni.setStorageSync('playModeIndex', 1);\n            uni.showToast({\n                title: '单曲循环',\n                icon: 'none',\n                duration: 1000\n            });\n        },\n\n        changePlayModeIndexToListCricle() {\n            this.setData({\n                playModeIndex: 0\n            });\n            playerStore.setState('playModeIndex', 0);\n            uni.setStorageSync('playModeIndex', 0);\n            uni.showToast({\n                title: '列表循环',\n                icon: 'none',\n                duration: 1000\n            });\n        },\n\n        //切换下一首(页面绑定)\n        changePlayMusicToNextMusic() {\n            //重置歌词状态，不重置会导致歌词还保留上一首歌曲的歌曲的位置\n            this.setData({\n                currentLycIndex: 0\n            });\n            playerStore.dispatch('changePlayMusicToNextMusicOrPreMusic', true);\n        },\n\n        //切换上一首(页面绑定)\n        changePlayMusicToPreMusic() {\n            this.setData({\n                currentLycIndex: 0\n            });\n            playerStore.dispatch('changePlayMusicToNextMusicOrPreMusic', false);\n        },\n\n        //快进30s(页面绑定)\n        changePlayMusicToQuick30s() {\n            playerStore.dispatch('changePlayMusicToQuickOrSlow30s', true);\n        },\n\n        //后退30s(页面绑定)\n        changePlayMusicToSlow30s() {\n            playerStore.dispatch('changePlayMusicToQuickOrSlow30s', false);\n        },\n\n        //点击歌曲改变歌曲播放(页面绑定)(已经转移到compenent组件)\n        changeCurrentMusic(event) {\n            let newMusicIndex = event.currentTarget.dataset.index; //必须是不等于undefined 不然为0的时候他就工作了\n\n            if (newMusicIndex !== undefined) {\n                playerStore.dispatch('changeCurrentMusic', newMusicIndex);\n            }\n        },\n\n        //点击歌曲删除歌曲列表中当前元素(页面绑定)\n        deleteMusicListCurrentMusic(event) {\n            let newMusicIndex = event.currentTarget.dataset.index;\n            playerStore.dispatch('deleteMusicListCurrentMusic', newMusicIndex); // //必须是不等于undefined 不然为0的时候他就工作了\n            // let playSongList=this.data.playSongList\n            // playSongList.splice(newMusicIndex,1)\n            // if(newMusicIndex !== undefined){\n            // this.setData({playSongList})\n            // playerStore.setState('playSongList',playSongList)\n            // }\n        },\n\n        //用于修复微信小程序无法正确获取到音频长度的BUG\n        loadDuration() {\n            setTimeout(() => {\n                if (backgroundAudioManager.duration > 0) {\n                    // 获取到正确的duration\n                    console.log(backgroundAudioManager.duration);\n                    let time = backgroundAudioManager.duration.toString().split('.');\n                    let timeMs = parseInt(time) * 1000;\n                    let min = this.transformMsToMin(timeMs);\n                    let sec = this.transformMsToSec(timeMs).toString().slice(0, 2);\n                    let formatTime = this.formatTime.split(':');\n                    formatTime[0] = min.toString();\n                    formatTime[1] = sec.toString();\n                    formatTime = formatTime.join(':').toString();\n                    this.setData({\n                        totalTime: backgroundAudioManager.duration,\n                        // canPlay:true,\n                        formatTime: formatTime\n                    });\n                    app.globalData.musicTotalTime = this.totalTime;\n\n                    if (this.canPlay) {\n                        // innerAudioContext.play();\n                    }\n                } else {\n                    this.loadDuration();\n                }\n            }, 10);\n        },\n\n        //用于转换ms与s之间的转换\n        transformMsToSec(totalMs) {\n            let min = parseInt(totalMs / 60000);\n            let remainSec = parseInt(totalMs / 1000 - min * 60);\n\n            if (remainSec < 10) {\n                return '0' + remainSec;\n            } else {\n                return remainSec;\n            }\n        },\n\n        //用于转化ms与分钟之间的关系\n        transformMsToMin(totalMs) {\n            let min = Math.floor((parseInt(totalMs) / 60000) * 10) / 10;\n\n            if (parseInt(min) < 10) {\n                return '0' + parseInt(min);\n            } else {\n                return parseInt(min);\n            }\n        },\n\n        //用于更新歌曲的进度条/当前时间(废弃，已经和watchMusic合并)\n        musicProcessTimeUpdate() {\n            backgroundAudioManager.onTimeUpdate(() => {\n                let procent = Math.floor((backgroundAudioManager.currentTime / backgroundAudioManager.duration) * 1000) / 10;\n\n                if (procent === 100) {\n                    console.log('成功');\n                } //当前时间的从s转化为min\n                // let time=backgroundAudioManager.currentTime.toString().split('.')\n                // let timeMs=parseInt(time)*1000\n                // let min=this.transformMsToMin(timeMs)\n                // let sec=this.transformMsToSec(timeMs).toString().slice(0,2)\n                // // console.log(this.transformMsToSec(timeMs))\n                // let currentTime=this.data.formatTime.split(':')\n                // currentTime[0]=min.toString();\n                // currentTime[1]=sec.toString();\n                // currentTime=currentTime.join(':').toString()\n\n                let currentTime = moment(backgroundAudioManager.currentTime * 1000).format('mm:ss'); //歌词根据当前时间进行滚动\n\n                let musicCurrentTime = backgroundAudioManager.currentTime;\n                let lycArray = this.lycArray; //判断是否是最后一行，因为我们在最后一行的时候无法再比较下下句和当前句的时间了，所以我们得进行特殊的判断\n\n                if (this.currentLycIndex === lycArray.length - 2) {\n                    console.log(this.currentLycIndex); //在唱最后一句\n\n                    if (musicCurrentTime >= lycArray[lycArray.length - 1][0]) {\n                        this.setData({\n                            currentLycIndex: lycArray.length - 1\n                        });\n                    }\n                } else if (this.currentLycIndex <= lycArray.length - 2) {\n                    for (let i = 0; i < lycArray.length; i++) {\n                        if (musicCurrentTime >= lycArray[i][0] && musicCurrentTime < lycArray[i + 1][0]) {\n                            this.setData({\n                                currentLycIndex: i\n                            });\n                        }\n                    }\n                }\n\n                if (this.currentLycIndex >= 0) {\n                    this.setData({\n                        //设置滚动距离，\n                        //为什么减6？因为我们是从第7个开始滚动的，也就是中间的这个位置\n                        toView: 'cate' + this.currentLycIndex,\n                        lycScrollTop: (this.currentLycIndex - 0) * 24.8 * 2\n                    });\n                } //不是在slider滑动状态，我们就设置data，如果在滑动我们就不设置data\n\n                console.log(!this.isSliderDrag);\n\n                if (!this.isSliderDrag) {\n                    this.setData({\n                        value: procent,\n                        currentTime: currentTime\n                    });\n                }\n            });\n        },\n\n        //判断此时的页面是是否是我们之前播放的页面(废弃)\n        musicIsNowPlayMusic(musicId) {\n            //如果此时的全局变量isMusicPlay为true和musicID与当前的msuicID相同\n            //也就是当前music在播放，而且新打开的页面与之前的页面相同\n            if (app.globalData.isMusicPlay && app.globalData.musicId === musicId) {\n                console.log(app.globalData.isMusicPlay);\n                console.log(app.globalData.musicId === musicId);\n                this.setData({\n                    isPlay: true\n                });\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        //防抖（已经迁移，迁移位置在顶部）\n        debounce(fun, delay) {\n            let run;\n            return () => {\n                let that = this;\n                let args = arguments;\n                clearTimeout(run);\n                run = setTimeout(() => {\n                    fun.apply(that, args);\n                }, delay);\n            };\n        },\n\n        // 处理歌词（废弃，改用store下面parse-lyric函数）\n        dealLyric(lyc) {\n            let lycResult = []; //处理歌词我们需要把他转化成数组形式\n\n            let lycArray = lyc.split('\\r\\n');\n\n            if (lycArray.length <= 2) {\n                lycArray = lyc.split('\\n');\n            } //删除数组中的最后一个元素，因为大多数情况下他都是空的\n\n            if (lycArray[lycArray.length - 1] === '') {\n                lycArray.pop();\n            } //使用正则表达式匹配歌词前面的时间\n            // \\d 匹配数字 \\d{2} 匹配两位\n            // \\[ \\用于转义，说明你这个[使用来搜索的  \\. 也是用于转义\n            // .原来的意思是匹配除了换行符以外的任意单个字符\n\n            let pattern = /\\[\\d{2}:\\d{2}\\.\\d{2,3}\\]/; //利用map函数替换每一个带有时间标记的元素\n\n            lycArray.map((item) => {\n                let realLyc = item.replace(pattern, '');\n                let lycTime = item.match(pattern); //去除括号\n\n                if (lycTime !== null) {\n                    lycTime = lycTime[0].slice(1, -1);\n                    let timeArray = lycTime.split(':');\n                    let realTime = parseInt(timeArray[0]) * 60 + parseFloat(timeArray[1]);\n                    let realTimeStr = parseFloat(realTime.toFixed(3)); //把时间和歌词放进一个数组中\n\n                    lycResult.push([realTimeStr, realLyc]);\n                    lycResult = this.dealLyricIsEmpty(lycResult);\n                } // console.log(lycTime)\n            });\n            return lycResult;\n        },\n\n        //处理歌词是空的情况，属于处理歌词的子函数（废弃）\n        dealLyricIsEmpty(lycArray) {\n            let resultLycArray = [];\n            lycArray.map((item) => {\n                if (item[1] !== '') {\n                    resultLycArray.push(item);\n                }\n            });\n            return resultLycArray;\n        },\n\n        //显示音乐数组（理应保留）(现在已转移到component)\n        changeShowMusicListState() {\n            let showMusicList = !this.showMusicList;\n            this.setData({\n                showMusicList: showMusicList\n            });\n        },\n\n        // ------------------------------监听专区---------------------\n        //用于监听Slider值变动后使用的函数(理应保留)\n        handleSliderChange(event) {\n            console.log(event); //获取滑动后变化的值\n\n            let valueAfterSlider = event.detail.value;\n            console.log(valueAfterSlider); //转化为百分比\n\n            let percentAfterSlider = valueAfterSlider / 100; //当前的时间 百分比*总时间\n            //此时的总时间是Ms 我们需要s，所以除以1000\n\n            let currentTimeAfterSlider = percentAfterSlider * this.totalTime; //调用backgroundAudioManager的seek函数让他跳转到指定的位置\n\n            backgroundAudioManager.pause();\n            backgroundAudioManager.seek(currentTimeAfterSlider);\n            backgroundAudioManager.play();\n            playerStore.setState('value', valueAfterSlider);\n            let currentTime = moment(currentTimeAfterSlider * 1000).format('mm:ss');\n            playerStore.setState('currentTime', currentTime); //设置最新的进度条状态\n\n            this.setData({\n                value: valueAfterSlider,\n                // 结束拖动事件，结束拖动状态\n                isSliderDrag: false,\n                currentTime: currentTime\n            });\n            playerStore.setState('isSliderDrag', false);\n        },\n\n        //用于监听页面的拖动状态(理应保留)\n        handleSliderDrag(event) {\n            this.setData({\n                isSliderDrag: true\n            });\n            playerStore.setState('isSliderDrag', true); //获取滑动正在拖动的位置当前值\n\n            let valueAfterDrag = event.detail.value;\n            console.log(valueAfterDrag); //转化为百分比\n\n            let percentAfterDrag = valueAfterDrag / 100;\n            let currentTimeAfterDrag = percentAfterDrag * this.totalTime; //时间格式化\n            // let time=currentTimeAfterDrag.toString().split('.')\n            // let timeMs=parseInt(time)*1000\n            // let min=this.transformMsToMin(timeMs)\n            // let sec=this.transformMsToSec(timeMs).toString().slice(0,2)\n            // // console.log(this.transformMsToSec(timeMs))\n            // let currentTime=this.data.formatTime.split(':')\n            // currentTime[0]=min.toString();\n            // currentTime[1]=sec.toString();\n            // currentTime=currentTime.join(':').toString()\n\n            let currentTime = moment(currentTimeAfterDrag * 1000).format('mm:ss');\n            playerStore.setState('isSliderDrag', true);\n            playerStore.setState('currentTime', currentTime);\n            this.setData({\n                isSliderDrag: true,\n                currentTime: currentTime\n            });\n            console.log(currentTime);\n        },\n\n        //监听歌曲播放(重要)（已经迁移，迁移位置在顶部）\n        watchMusic() {\n            backgroundAudioManager.onPlay(() => {\n                this.changeMusicIsPlay(true); //设置全局变量isMusicPlay，isMusicPlay用于检验我们退出当前界面后我们是否点击了相同的音乐\n\n                app.globalData.isMusicPlay = true;\n                app.globalData.musicId = this.musicId;\n            });\n            backgroundAudioManager.onPause(() => {\n                this.changeMusicIsPlay(false); //当我们进行播放的时候我们就已经\n\n                app.globalData.isMusicPlay = false;\n            });\n            backgroundAudioManager.onStop(() => {\n                this.changeMusicIsPlay(false);\n                app.globalData.isMusicPlay = false;\n            });\n            backgroundAudioManager.onTimeUpdate(\n                this.debounce(() => {\n                    let procent = Math.floor((backgroundAudioManager.currentTime / backgroundAudioManager.duration) * 1000) / 10;\n\n                    if (procent === 100) {\n                        console.log('成功');\n                    } //当前时间的从s转化为min\n\n                    let currentTime = moment(backgroundAudioManager.currentTime * 1000).format('mm:ss'); // let time=backgroundAudioManager.currentTime.toString().split('.')\n                    // let timeMs=parseInt(time)*1000\n                    // let min=this.transformMsToMin(timeMs)\n                    // let sec=this.transformMsToSec(timeMs).toString().slice(0,2)\n                    // // console.log(this.transformMsToSec(timeMs))\n                    // let currentTime=this.data.formatTime.split(':')\n                    // currentTime[0]=min.toString();\n                    // currentTime[1]=sec.toString();\n                    // currentTime=currentTime.join(':').toString()\n                    //歌词根据当前时间进行滚动\n                    //为什么乘1000因为我们在parse-lyric里面把以ms为单位，currentTime返回的是s，所以乘以1000\n\n                    let musicCurrentTime = backgroundAudioManager.currentTime * 1000;\n                    let lycArray = this.lycArray; //该方法废弃，废弃原因：会造成歌词显示慢，改用下面的方法\n                    //判断是否是最后一行，因为我们在最后一行的时候无法再比较下下句和当前句的时间了，所以我们得进行特殊的判断\n                    // if(this.data.currentLycIndex === lycArray.length-2){\n                    //   console.log(this.data.currentLycIndex)\n                    //   //在唱最后一句\n                    //   if(musicCurrentTime>=lycArray[lycArray.length-1][0]){\n                    //     this.setData({\n                    //       currentLycIndex:lycArray.length-1\n                    //     })\n                    //   }\n                    // }else if(this.data.currentLycIndex <= lycArray.length-2){\n                    //   for( let  i=0;i<lycArray.length;i++){\n                    //     if(musicCurrentTime>=lycArray[i][0]&&musicCurrentTime<lycArray[i+1][0]){\n                    //       this.setData({\n                    //         currentLycIndex:i\n                    //       })\n                    //     }\n                    //   }\n                    // }\n                    //原理：找出比当前时间大的一些的歌词的位置，找到了，当前歌词的位置就在到歌词的下面\n                    //如果lycArray的长度没有值的话就直接跳过\n\n                    if (!this.lycArray.length) {\n                        return;\n                    }\n\n                    let i = 0;\n\n                    for (; i < lycArray.length; i++) {\n                        let lycTime = lycArray[i][0];\n\n                        if (musicCurrentTime < lycTime) {\n                            break;\n                        }\n                    }\n\n                    let currentIndex = i - 1;\n\n                    if (this.currentLycIndex !== currentIndex) {\n                        this.setData({\n                            currentLycIndex: currentIndex\n                        });\n                    }\n\n                    if (this.currentLycIndex >= 0) {\n                        this.setData({\n                            //设置滚动距离，\n                            //为什么减6？因为我们是从第7个开始滚动的，也就是中间的这个位置\n                            lycScrollTop: (this.currentLycIndex - 0) * 24.8 * 2,\n                            toLyc: 'Lyc' + this.currentLycIndex\n                        });\n                    } //不是在slider滑动状态，我们就设置data，如果在滑动我们就不设置data\n\n                    console.log(this.isSliderDrag);\n\n                    if (!this.isSliderDrag) {\n                        this.setData({\n                            value: procent,\n                            currentTime: currentTime\n                        });\n                    }\n                }, 200)\n            );\n        },\n\n        // 歌词相关的变量监听 函数抽离\n        musicStateWatchFunciton({ formatTime, lycArray, totalTime, currentLycIndex, lycScrollTop, toLyc, currentTime }) {\n            if (formatTime) {\n                this.setData({\n                    formatTime\n                });\n            }\n\n            if (lycArray) {\n                this.setData({\n                    lycArray\n                });\n            }\n\n            if (totalTime) {\r\n\t\t\t\tconsole.log(totalTime)\n                this.setData({\n                    totalTime\n                });\n            }\n\n            if (currentLycIndex !== undefined && currentLycIndex !== null) {\n                this.setData({\n                    currentLycIndex\n                });\n            }\n\n            if (lycScrollTop) {\r\n\t\t\t\tconsole.log(lycScrollTop)\n                this.setData({\n                    lycScrollTop\n                });\n            }\n\n            if (toLyc) {\n                this.setData({\n                    toLyc\n                });\n            } //时间变化\n\n            if (currentTime && !this.isSliderDrag) {\n                this.setData({\n                    currentTime\n                });\r\n\t\t\t\tconsole.log(currentTime)\n            }\n        },\n\n        //用于监听store下面的player-store player-store放着我们需要的歌曲/歌词信息\n        //注意异步请求，会有一段时间的null，所以建议发过来的值就是直接是异步请求后的\n        //(重要)\n        watchPlayerStoreListener() {\n            // onStates可以监听多个数值\n            //若只有最右边的括号里只有个值，就返回的是对象，若是有多个值加个中括号就是对象里面的值了\n            //播放相关的变量监听\n            playerStore.onStates(['music', 'id', 'isPlay'], ({ music, id, isPlay }) => {\n                if (music) {\n                    this.setData({\n                        music: music\n                    });\n                }\n\n                if (id) {\n                    this.setData({\n                        id: id\n                    });\n                }\n\n                if (isPlay) {\n                    this.setData({\n                        isPlay: isPlay\n                    });\n                }\n            }); //歌词相关的变量监听\n\n            playerStore.onStates(\n                ['formatTime', 'lycArray', 'totalTime', 'currentLycIndex', 'lycScrollTop', 'toLyc', 'currentTime'], //封装好的函数，就在watchPlayerStoreListener上面\n                this.musicStateWatchFunciton\n            ); //进度条相关变量监听\n\n            playerStore.onStates(['value'], ({ value }) => {\n                if (value !== undefined && value !== null) {\n                    this.setData({\n                        value: value\n                    });\n                } //  const  fun =()=>{\n                //   console.log(value)\n                //   if(value){   this.setData({value:value})\n                //  }\n                //   }\n                // throttle(()=>{\n                // console.log(value)\n                // if(value){   this.setData({value:value})}\n                // },10)\n            }); //播放模式相关变量监听\n\n            playerStore.onStates(['playModeIndex'], ({ playModeIndex }) => {\n                if (playModeIndex) {\n                    this.setData({\n                        playModeIndex: playModeIndex,\n                        playModeName: playModeNames[playModeIndex]\n                    });\n                }\n            }); //歌单相关变量监听\n\n            playerStore.onStates(['playSongList', 'playSongIndex'], ({ playSongList, playSongIndex }) => {\n                if (playSongList !== undefined && playSongList !== null) {\n                    this.setData({\n                        playSongList: playSongList\n                    });\n                }\n\n                if (playSongIndex !== undefined && playSongIndex !== null) {\n                    this.setData({\n                        playSongIndex: playSongIndex\n                    });\n                }\n            });\n        }\n    }\n};\n</script>\n<style lang=\"scss\">\n/* pages/music-player/detail.wxss */\n\npage {\n    overflow-y: hidden;\n}\n\n.bg-image {\n    position: fixed;\n    left: 0;\n    top: 0;\n    width: 100vw;\n    height: 100vh;\n    z-index: -1;\n}\n.bg-cover {\n    position: fixed;\n    left: 0;\n    top: 0;\n    width: 100vw;\n    height: 100vh;\n    z-index: -1;\n    background-color: rgba(white, 0.5);\n    backdrop-filter: blur(30px);\n}\n.maskBgc {\n    position: absolute;\n    width: 100vw;\n    height: 100vh;\n    background-color: rgba(0, 0, 0, 0.3);\n    top: 0;\n    left: 0;\n    z-index: 100;\n    overflow: hidden;\n}\n.shrinked-lyc-container {\n    position: relative;\n    flex: 1;\n\n    width: 632rpx;\n    max-width: 632rpx;\n    height: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    .shrinked-scroll-container {\n        position: relative;\n        display: flex;\n        max-height: 60rpx;\n        width: 30rpx;\n        scroll-view {\n            max-height: 50rpx;\n            view {\n                width: 100%;\n                color: rgba(black, 0.5);\n                font-size: 34rpx;\n                line-height: 50rpx;\n                text-align: center;\n            }\n            .currentLyc {\n                color: rgba(#0041c4, 1);\n            }\n        }\n    }\n}\n\n.real-music-list {\n    position: fixed;\n    bottom: 2vh;\n    left: calc((100vw - 628rpx) / 2);\n    /* 通过位移隐藏列表框 */\n    width: 628rpx;\n    height: 628rpx;\n    border-radius: 40rpx;\n    background-color: rgba(white, 0.6);\n    backdrop-filter: blur(60rpx);\n    /* opacity: 0;*/\n    display: block;\n\n    transform: translate(0%, 60vh);\n    transition: transform 0.75s;\n\n    overflow: hidden;\n    z-index: 1000;\n    .music-list-container {\n        max-height: 628rpx;\n        max-width: 628rpx;\n        width: 628rpx;\n        height: 628rpx;\n        display: flex;\n        flex-direction: column;\n        .music-list-title {\n            height: 6vh;\n            width: calc(100% - 34rpx);\n            font-size: 34rpx;\n            line-height: 6vh;\n            margin-left: 35rpx;\n            font-weight: 600;\n            color: rgba($color: black, $alpha: 0.75);\n            .musicListLength {\n                font-size: 26rpx;\n                color: rgba($color: grey, $alpha: 0.95);\n            }\n        }\n        .musicListSrcoll {\n            margin-left: 34rpx;\n            height: 50%;\n            flex: 1;\n            width: calc(100% - 34rpx);\n            .musicItem {\n                position: relative;\n                margin: 0rpx 0 0rpx 0rpx;\n                height: 70rpx;\n                width: 100%;\n                text-overflow: ellipsis;\n\n                display: flex;\n                align-items: center;\n                .music-info-container {\n                    display: flex;\n                    flex-direction: row;\n\n                    width: 80%;\n                    max-width: 80%;\n                    text-overflow: ellipsis;\n                    overflow: hidden;\n                    white-space: nowrap;\n                    font-size: 25rpx;\n                    color: rgba($color: black, $alpha: 0.8);\n                    .artist-name {\n                        text-overflow: ellipsis;\n                        overflow: hidden;\n                        white-space: nowrap;\n                        font-size: 25rpx;\n                        color: rgba($color: grey, $alpha: 0.85);\n                    }\n                    .current-music-name {\n                        color: rgba($color: #0041c4, $alpha: 1);\n                    }\n                    .current-artist-name {\n                        color: rgba($color: #0041c4, $alpha: 1);\n                        text-overflow: ellipsis;\n                        overflow: hidden;\n                        white-space: nowrap;\n                        font-size: 25rpx;\n                    }\n                }\n                .delete-icon-container {\n                    height: 100%;\n                    width: 20%;\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    .delete-icon {\n                        color: #a0a0a0;\n                        font-size: 50rpx;\n                    }\n                }\n            }\n        }\n        .music-list-bottom {\n            min-height: 4vh;\n        }\n    }\n}\n.function-icon-container {\n    height: 50vh;\n    width: 50vh;\n    min-height: 50vh;\n    display: flex;\n    flex-direction: column;\n    justify-items: center;\n    align-items: center;\n}\n.page {\n    display: flex;\n\n    flex-direction: column;\n\n    position: relative;\n    width: 100vw;\n    height: 100vh;\n\n    .music-player-container {\n        height: 100%;\n        width: 100%;\n        display: flex;\n\n        flex-direction: column;\n        align-items: center;\n    }\n    .img-container {\n        display: flex;\n        position: relative;\n        width: 100%;\n        height: 100%;\n        max-height: 50vh;\n        min-height: 50vh;\n\n        view {\n            position: relative;\n            flex-direction: column;\n            width: 100%;\n            height: 100%;\n            display: flex;\n            align-items: center;\n\n            border-radius: 40rpx;\n            .musicImg {\n                margin-top: 2vh;\n\n                width: 628rpx;\n                height: 628rpx;\n                border-radius: 40rpx;\n                display: inline-block;\n            }\n            /*高斯模糊*/\n            .musicImg::before {\n                /* content: \"\";*/\n\n                /* position: absolute; */ /* 一定要用绝对定位 */ /**/\n                /* width: 628rpx;*/\n                /* height: 628rpx;*/\n                /* backdrop-filter: blur(120rpx); */ /* 模糊半径 */ /**/\n                /* border-radius: 40rpx;*/\n                /* opacity: 0.6;*/\n                /* z-index:-1;*/\n            }\n        }\n    }\n    .lyc-container {\n        width: 40vh;\n        height: 50vh;\n\n        max-height: 50vh;\n        border-radius: 40rpx;\n        scroll-view {\n            max-height: 50vh;\n            height: 100%;\n\n            view {\n                max-height: 50rpx;\n                width: 100%;\n                color: rgba(black, 0.5);\n                font-size: 34rpx;\n                line-height: 50rpx;\n                text-align: center;\n            }\n            .currentLyc {\n                color: #0041c4;\n            }\n            .decorate {\n                visibility: hidden;\n            }\n        }\n    }\n\n    .text-container {\n        position: relative;\n\n        width: 632rpx;\n        max-width: 632rpx;\n\n        height: 162rpx;\n        max-height: 162rpx;\n        view {\n            position: relative;\n            width: 100%;\n            height: 100%;\n            max-width: 100%;\n            max-height: 100%;\n\n            .music-name-container {\n                width: 100%;\n                height: 52rpx;\n                color: rgb(8, 8, 8);\n                font-size: 48rpx;\n                font-weight: 1400rpx;\n                line-height: 52rpx;\n                letter-spacing: 0px;\n                overflow: hidden;\n                text-overflow: ellipsis;\n                white-space: nowrap;\n                font-family: 'AppleGothic';\n            }\n            .album-name-container {\n                width: 100%;\n                height: 40rpx;\n                color: rgb(255, 45, 85);\n                opacity: 0.6;\n                font-size: 34rpx;\n                font-weight: 800rpx;\n                line-height: 40rpx;\n                letter-spacing: 0px;\n                margin-top: 16rpx;\n                overflow: hidden;\n                text-overflow: ellipsis;\n                white-space: nowrap;\n                font-family: 'AppleGothic';\n            }\n            .artist-name-container {\n                width: 100%;\n                height: 40rpx;\n                color: rgb(8, 8, 8);\n                opacity: 0.61;\n                font-size: 34rpx;\n                font-weight: 800rpx;\n                line-height: 40rpx;\n                letter-spacing: 0px;\n                margin-top: 16rpx;\n                overflow: hidden;\n                text-overflow: ellipsis;\n                white-space: nowrap;\n                font-family: 'AppleGothic';\n            }\n        }\n    }\n    .time-code-solider {\n        position: relative;\n        flex: 0.4;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        height: 84rpx;\n        width: 634rpx;\n        .progress {\n            position: relative;\n            width: 100%;\n            height: 30rpx;\n            /*进度条以外的背景颜色*/\n            background-color: rgba(16, 93, 251, 0.4);\n            /*主要倒圆角的位置*/\n            border-radius: 60rpx;\n            overflow: hidden;\n            .progress-bar {\n                /* 设置默认的宽度，我们用脚本来设置该宽度*/\n                width: 0;\n                height: 100%;\n                /* 设置背景主色调，进度条的主要颜色来源，进度条其实原本没什么颜色*/\n                background-color: rgba(16, 93, 251, 1);\n                background-image: linear-gradient(\n                    /* 倾斜135度*/ 135deg,\n                    /*rgba(255,255,255,.15) 就是白色线 */ /* rgba(255,255,255,.15) 0%,*/ /* rgba(255,255,255,.15) 25%, 意思是整个图片的0-25%是整个颜色的，也就是有点透明的白色*/\n                        rgba(255, 255, 255, 0.15) 0%,\n                    rgba(255, 255, 255, 0.15) 25%,\n                    /* transparent 25%,transparent 50%,意思是整个图片的25-50%是透明的，他之所以看起来是蓝色是因为我们设置了背景颜色，*/ transparent 25%,\n                    transparent 50%,\n                    /*同上*/ rgba(255, 255, 255, 0.15) 50%,\n                    rgba(255, 255, 255, 0.15) 75%,\n                    /*同上*/ transparent 75%,\n                    transparent 100%\n                );\n                /*设置背景图像的高度和宽度(不加的话，只有一张图片而且图片会一直变大，失真)*/\n                background-size: 80rpx 80rpx;\n                /* transition: width 0.6s ease;*/\n                /*倒圆角，主要倒圆角的位置不是在这里，在父级容器*/\n                border-radius: 60rpx;\n                /* progress-bar-anim是我们自定义的动画*/\n                /*2s 就是整个移动持续2s*/\n                /*linear线性 要是不加就2s触发一次动画，这也是我们进度条美观的核心*/\n                /*infinite无限循环，这就是我们精度条美观的核心*/\n                animation: progress-bar-anim 2s linear infinite;\n                .progress-bar-value {\n                    font-size: 26rpx;\n                    font-weight: bold;\n                    opacity: 0;\n                    color: white;\n                }\n                /* 设置动画*/\n                /* 动画的内容，图片从右边 80rpx的位置滑动的移动到0px的位置*/\n                /*因为我们的进度条最长也就80px，也就是说整个背景图片就会一直往左移动*/\n                @keyframes progress-bar-anim {\n                    from {\n                        background-position: 80rpx 0;\n                    }\n                    to {\n                        background-position: 0rpx 0;\n                    }\n                }\n            }\n        }\n        .slider-container {\n            width: 100%;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            view {\n                width: 98%;\n                height: 100%;\n\n                .slider {\n                    width: 100%;\n\n                    margin: 0 0 0 0 !important;\n                }\r\n\t\t\t\t//uniapp适配\r\n\t\t\t\tuni-slider .uni-slider-track {\r\n\t\t\t\t    width: 0;\r\n\t\t\t\t    /* background: linear-gradient(to right, #4169E1 0%, #00FFFF 100%);*/\r\n\t\t\t\t    background-image: linear-gradient(\r\n\t\t\t\t        /* 倾斜135度*/ 135deg,\r\n\t\t\t\t        /*rgba(255,255,255,.15) 就是白色线 */ /* rgba(255,255,255,.15) 0%,*/ /* rgba(255,255,255,.15) 25%, 意思是整个图片的0-25%是整个颜色的，也就是有点透明的白色*/\r\n\t\t\t\t            rgba(255, 255, 255, 0.15) 0%,\r\n\t\t\t\t        rgba(255, 255, 255, 0.15) 25%,\r\n\t\t\t\t        /* transparent 25%,transparent 50%,意思是整个图片的25-50%是透明的，他之所以看起来是蓝色是因为我们设置了背景颜色，*/ transparent 25%,\r\n\t\t\t\t        transparent 50%,\r\n\t\t\t\t        /*同上*/ rgba(255, 255, 255, 0.15) 50%,\r\n\t\t\t\t        rgba(255, 255, 255, 0.15) 75%,\r\n\t\t\t\t        /*同上*/ transparent 75%,\r\n\t\t\t\t        transparent 100%\r\n\t\t\t\t    );\r\n\t\t\t\t    /*设置背景图像的高度和宽度(不加的话，只有一张图片而且图片会一直变大，失真)*/\r\n\t\t\t\t    background-size: 80rpx 80rpx;\r\n\t\t\t\t    /* transition: width 0.6s ease;*/\r\n\t\t\t\t    /*倒圆角，主要倒圆角的位置不是在这里，在父级容器*/\r\n\t\t\t\t    border-radius: 60rpx;\r\n\t\t\t\t    /* progress-bar-anim是我们自定义的动画*/\r\n\t\t\t\t    /*2s 就是整个移动持续2s*/\r\n\t\t\t\t    /*linear线性 要是不加就2s触发一次动画，这也是我们进度条美观的核心*/\r\n\t\t\t\t    /*infinite无限循环，这就是我们精度条美观的核心*/\r\n\t\t\t\t    animation: progress-bar-anim 2s linear infinite;\r\n\t\t\t\t    @keyframes progress-bar-anim {\r\n\t\t\t\t        from {\r\n\t\t\t\t            background-position: 80rpx 0;\r\n\t\t\t\t        }\r\n\t\t\t\t        to {\r\n\t\t\t\t            background-position: 0rpx 0;\r\n\t\t\t\t        }\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\t\t\t\tuni-slider .uni-slider-handle-wrapper {\r\n\t\t\t\t    height: 26rpx;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t//小程序适配\n                wx-slider .wx-slider-track {\n                    width: 0;\n                    /* background: linear-gradient(to right, #4169E1 0%, #00FFFF 100%);*/\n                    background-image: linear-gradient(\n                        /* 倾斜135度*/ 135deg,\n                        /*rgba(255,255,255,.15) 就是白色线 */ /* rgba(255,255,255,.15) 0%,*/ /* rgba(255,255,255,.15) 25%, 意思是整个图片的0-25%是整个颜色的，也就是有点透明的白色*/\n                            rgba(255, 255, 255, 0.15) 0%,\n                        rgba(255, 255, 255, 0.15) 25%,\n                        /* transparent 25%,transparent 50%,意思是整个图片的25-50%是透明的，他之所以看起来是蓝色是因为我们设置了背景颜色，*/ transparent 25%,\n                        transparent 50%,\n                        /*同上*/ rgba(255, 255, 255, 0.15) 50%,\n                        rgba(255, 255, 255, 0.15) 75%,\n                        /*同上*/ transparent 75%,\n                        transparent 100%\n                    );\n                    /*设置背景图像的高度和宽度(不加的话，只有一张图片而且图片会一直变大，失真)*/\n                    background-size: 80rpx 80rpx;\n                    /* transition: width 0.6s ease;*/\n                    /*倒圆角，主要倒圆角的位置不是在这里，在父级容器*/\n                    border-radius: 60rpx;\n                    /* progress-bar-anim是我们自定义的动画*/\n                    /*2s 就是整个移动持续2s*/\n                    /*linear线性 要是不加就2s触发一次动画，这也是我们进度条美观的核心*/\n                    /*infinite无限循环，这就是我们精度条美观的核心*/\n                    animation: progress-bar-anim 2s linear infinite;\n                    @keyframes progress-bar-anim {\n                        from {\n                            background-position: 80rpx 0;\n                        }\n                        to {\n                            background-position: 0rpx 0;\n                        }\n                    }\n                }\n\n                wx-slider .wx-slider-handle-wrapper {\n                    height: 26rpx;\n                }\n            }\n        }\n        .time-container {\n            position: relative;\n            width: 100%;\n            display: flex;\n            flex-direction: row;\n            justify-content: space-between;\n            .current-time {\n                font-size: 22rpx;\n                font-weight: 800rpx;\n                line-height: 26rpx;\n                color: rgb(16, 93, 251);\n                font-family: 'AppleGothic';\n            }\n            .total-time {\n                font-size: 22rpx;\n                font-weight: 800rpx;\n                line-height: 26rpx;\n                color: rgb(16, 93, 251);\n                font-family: 'AppleGothic';\n            }\n        }\n    }\n\n    .play-icon-container {\n        width: 634rpx;\n        height: 100rpx;\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        justify-content: space-between;\n\n        .back {\n            position: relative;\n            width: 36rpx;\n            height: 40rpx;\n\n            view {\n                position: relative;\n                width: 36rpx;\n                height: 40rpx;\n                max-width: 36rpx;\n                max-height: 40rpx;\n                image {\n                    width: 100%;\n                    height: 100%;\n                    max-width: 56rpx;\n                    max-height: 60rpx;\n                }\n            }\n        }\n\n        .previous-music {\n            position: relative;\n            width: 66rpx;\n            height: 40rpx;\n            view {\n                position: relative;\n                width: 100%;\n                height: 100%;\n                max-width: 100%;\n                max-height: 100%;\n                image {\n                    width: 100%;\n                    height: 100%;\n                }\n            }\n        }\n\n        .play-music {\n            position: relative;\n            width: 140rpx;\n            height: 140rpx;\n            view {\n                position: relative;\n                width: 100%;\n                height: 100%;\n                max-width: 100%;\n                max-height: 100%;\n                image {\n                    width: 100%;\n                    height: 100%;\n                }\n            }\n        }\n        .next-music {\n            position: relative;\n            width: 66rpx;\n            height: 40rpx;\n            view {\n                position: relative;\n                width: 100%;\n                height: 100%;\n                max-width: 100%;\n                max-height: 100%;\n                image {\n                    width: 100%;\n                    height: 100%;\n                }\n            }\n        }\n        .forward {\n            position: relative;\n            width: 36rpx;\n            height: 40rpx;\n            view {\n                position: relative;\n                width: 36rpx;\n                height: 40rpx;\n                max-width: 36rpx;\n                max-height: 40rpx;\n                image {\n                    width: 100%;\n                    height: 100%;\n                    max-width: 56rpx;\n                    max-height: 60rpx;\n                }\n            }\n        }\n    }\n    .like-icon-container {\n        width: 650rpx;\n        height: 200rpx;\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        justify-content: space-between;\n\n        .like {\n            position: relative;\n            width: 48rpx;\n            height: 48rpx;\n\n            view {\n                position: relative;\n                width: 100%;\n                height: 100%;\n                image {\n                    width: 100%;\n                    height: 100%;\n                }\n            }\n        }\n        .ramdom-play {\n            position: relative;\n            width: 56rpx;\n            height: 56rpx;\n\n            view {\n                position: relative;\n                width: 100%;\n                height: 100%;\n                image {\n                    width: 100%;\n                    height: 100%;\n                }\n            }\n        }\n        .single-circle-play {\n            position: relative;\n            width: 48rpx;\n            height: 48rpx;\n\n            view {\n                position: relative;\n                width: 100%;\n                height: 100%;\n                image {\n                    width: 100%;\n                    height: 100%;\n                }\n            }\n        }\n        .list-circle-play {\n            position: relative;\n            width: 48rpx;\n            height: 48rpx;\n\n            view {\n                position: relative;\n                width: 100%;\n                height: 100%;\n                image {\n                    width: 100%;\n                    height: 100%;\n                }\n            }\n        }\n        .music-list {\n            position: relative;\n            width: 60rpx;\n            height: 60rpx;\n\n            view {\n                position: relative;\n                width: 100%;\n                height: 100%;\n                image {\n                    width: 100%;\n                    height: 100%;\n                }\n            }\n        }\n    }\n}\n</style>\n","import mod from \"-!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\mini-css-extract-plugin\\\\dist\\\\loader.js??ref--8-oneOf-1-0!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\css-loader\\\\dist\\\\cjs.js??ref--8-oneOf-1-1!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\loaders\\\\stylePostLoader.js!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--8-oneOf-1-2!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\postcss-loader\\\\src\\\\index.js??ref--8-oneOf-1-3!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\sass-loader\\\\dist\\\\cjs.js??ref--8-oneOf-1-4!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--8-oneOf-1-5!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./detail.vue?vue&type=style&index=0&lang=scss&\"; export default mod; export * from \"-!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\mini-css-extract-plugin\\\\dist\\\\loader.js??ref--8-oneOf-1-0!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\css-loader\\\\dist\\\\cjs.js??ref--8-oneOf-1-1!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\loaders\\\\stylePostLoader.js!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--8-oneOf-1-2!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\postcss-loader\\\\src\\\\index.js??ref--8-oneOf-1-3!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\sass-loader\\\\dist\\\\cjs.js??ref--8-oneOf-1-4!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--8-oneOf-1-5!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./detail.vue?vue&type=style&index=0&lang=scss&\"","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1654247586435\n      var cssReload = require(\"D:/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"hmr\":true,\"publicPath\":\"../../\",\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  ","import mod from \"-!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-uni-filter-loader\\\\index.js!./map.wxs?vue&type=custom&index=0&blockType=script&issuerPath=C%3A%5CUsers%5CAdministrator%5CDesktop%5Ctest002%5Cminiprogram02_uni%5Cpages%5Cmusic-player%5Cdetail.vue&module=map&lang=wxs\"; export default mod; export * from \"-!D:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-uni-filter-loader\\\\index.js!./map.wxs?vue&type=custom&index=0&blockType=script&issuerPath=C%3A%5CUsers%5CAdministrator%5CDesktop%5Ctest002%5Cminiprogram02_uni%5Cpages%5Cmusic-player%5Cdetail.vue&module=map&lang=wxs\"","export default function (Component) {\n       if(!Component.options.wxsCallMethods){\n         Component.options.wxsCallMethods = []\n       }\n       \n     }"],"sourceRoot":""}